//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MongoDB - Create Database
In this chapter, we will see how to create a database in MongoDB.

The use Command
MongoDB use DATABASE_NAME is used to create database. The command will create a new database if it doesn't exist, otherwise it will return the existing database.

Syntax
Basic syntax of use DATABASE statement is as follows -

use DATABASE_NAME
Example
If you want to create a database with name <mydb>, then use DATABASE statement would be as follows -

>use mydb
switched to db mydb
To check your currently selected database, use the command db

>db
mydb
If you want to check your databases list, use the command show dbs.

>show dbs
local     0.78125GB
test      0.23012GB
Your created database (mydb) is not present in list. To display database, you need to insert at least one document into it.

>db.movie.insert({"name":"tutorials point"})
>show dbs
local      0.78125GB
mydb       0.23012GB
test       0.23012GB
In MongoDB default database is test. If you didn't create any database, then collections will be stored in test database.

MongoDB - Drop Database
In this chapter, we will see how to drop a database using MongoDB command.

The dropDatabase() Method
MongoDB db.dropDatabase() command is used to drop a existing database.

Syntax
Basic syntax of dropDatabase() command is as follows -

db.dropDatabase()
This will delete the selected database. If you have not selected any database, then it will delete default 'test' database.

Example
First, check the list of available databases by using the command, show dbs.

>show dbs
local      0.78125GB
mydb       0.23012GB
test       0.23012GB
>
If you want to delete new database <mydb>, then dropDatabase() command would be as follows -

>use mydb
switched to db mydb
>db.dropDatabase()
>{ "dropped" : "mydb", "ok" : 1 }
>
Now check list of databases.

>show dbs
local      0.78125GB
test       0.23012GB
>
MongoDB - Create Collection
In this chapter, we will see how to create a collection using MongoDB.

The createCollection() Method
MongoDB db.createCollection(name, options) is used to create collection.

Syntax
Basic syntax of createCollection() command is as follows -

db.createCollection(name, options)
In the command, name is name of collection to be created. Options is a document and is used to specify configuration of collection.

Parameter	Type	Description
Name	String	Name of the collection to be created
Options	Document	(Optional) Specify options about memory size and indexing
Options parameter is optional, so you need to specify only the name of the collection. Following is the list of options you can use -

Field	Type	Description
capped	Boolean	(Optional) If true, enables a capped collection. Capped collection is a fixed size collection that automatically overwrites its oldest entries when it reaches its maximum size. If you specify true, you need to specify size parameter also.
autoIndexId	Boolean	(Optional) If true, automatically create index on _id field.s Default value is false.
size	number	(Optional) Specifies a maximum size in bytes for a capped collection. If capped is true, then you need to specify this field also.
max	number	(Optional) Specifies the maximum number of documents allowed in the capped collection.
While inserting the document, MongoDB first checks size field of capped collection, then it checks max field.

Examples
Basic syntax of createCollection() method without options is as follows -

>use test
switched to db test
>db.createCollection("mycollection")
{ "ok" : 1 }
>
You can check the created collection by using the command show collections.

>show collections
mycollection
system.indexes
The following example shows the syntax of createCollection() method with few important options -

>db.createCollection("mycol", { capped : true, autoIndexId : true, size : 
   6142800, max : 10000 } )
{ "ok" : 1 }
>
In MongoDB, you don't need to create collection. MongoDB creates collection automatically, when you insert some document.

>db.tutorialspoint.insert({"name" : "tutorialspoint"})
>show collections
mycol
mycollection
system.indexes
tutorialspoint
>
MongoDB - Drop Collection
In this chapter, we will see how to drop a collection using MongoDB.

The drop() Method
MongoDB's db.collection.drop() is used to drop a collection from the database.

Syntax
Basic syntax of drop() command is as follows -

db.COLLECTION_NAME.drop()
Example
First, check the available collections into your database mydb.

>use mydb
switched to db mydb
>show collections
mycol
mycollection
system.indexes
tutorialspoint
>
Now drop the collection with the name mycollection.

>db.mycollection.drop()
true
>
Again check the list of collections into database.

>show collections
mycol
system.indexes
tutorialspoint
>
drop() method will return true, if the selected collection is dropped successfully, otherwise it will return false.

MongoDB - Datatypes
MongoDB supports many datatypes. Some of them are -

String - This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.

Integer - This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.

Boolean - This type is used to store a boolean (true/ false) value.

Double - This type is used to store floating point values.

Min/ Max keys - This type is used to compare a value against the lowest and highest BSON elements.

Arrays - This type is used to store arrays or list or multiple values into one key.

Timestamp - ctimestamp. This can be handy for recording when a document has been modified or added.

Object - This datatype is used for embedded documents.

Null - This type is used to store a Null value.

Symbol - This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type.

Date - This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it.

Object ID - This datatype is used to store the document’s ID.

Binary data - This datatype is used to store binary data.

Code - This datatype is used to store JavaScript code into the document.

Regular expression - This datatype is used to store regular expression.

MongoDB - Insert Document
In this chapter, we will learn how to insert document in MongoDB collection.

The insert() Method
To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method.

Syntax
The basic syntax of insert() command is as follows -

>db.COLLECTION_NAME.insert(document)
Example
>db.mycol.insert({
   _id: ObjectId(7df78ad8902c),
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
})
Here mycol is our collection name, as created in the previous chapter. If the collection doesn't exist in the database, then MongoDB will create this collection and then insert a document into it.

In the inserted document, if we don't specify the _id parameter, then MongoDB assigns a unique ObjectId for this document.

_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows -

_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 
   3 bytes incrementer)
To insert multiple documents in a single query, you can pass an array of documents in insert() command.

Example
>db.post.insert([
   {
      title: 'MongoDB Overview', 
      description: 'MongoDB is no sql database',
      by: 'tutorials point',
      url: 'http://www.tutorialspoint.com',
      tags: ['mongodb', 'database', 'NoSQL'],
      likes: 100
   },
	
   {
      title: 'NoSQL Database', 
      description: 'NoSQL database doesn't have tables',
      by: 'tutorials point',
      url: 'http://www.tutorialspoint.com',
      tags: ['mongodb', 'database', 'NoSQL'],
      likes: 20, 
      comments: [	
         {
            user:'user1',
            message: 'My first comment',
            dateCreated: new Date(2013,11,10,2,35),
            like: 0 
         }
      ]
   }
])
To insert the document you can use db.post.save(document) also. If you don't specify _id in the document then save() method will work same as insert() method. If you specify _id then it will replace whole data of document containing _id as specified in save() method.

MongoDB - Query Document
In this chapter, we will learn how to query document from MongoDB collection.

The find() Method
To query data from MongoDB collection, you need to use MongoDB's find() method.

Syntax
The basic syntax of find() method is as follows -

>db.COLLECTION_NAME.find()
find() method will display all the documents in a non-structured way.

The pretty() Method
To display the results in a formatted way, you can use pretty() method.

Syntax
>db.mycol.find().pretty()
Example
>db.mycol.find().pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>
Apart from find() method, there is findOne() method, that returns only one document.

RDBMS Where Clause Equivalents in MongoDB
To query the document on the basis of some condition, you can use following operations.

Operation	Syntax	Example	RDBMS Equivalent
Equality	{<key>:<value>}	db.mycol.find({"by":"tutorials point"}).pretty()	where by = 'tutorials point'
Less Than	{<key>:{$lt:<value>}}	db.mycol.find({"likes":{$lt:50}}).pretty()	where likes < 50
Less Than Equals	{<key>:{$lte:<value>}}	db.mycol.find({"likes":{$lte:50}}).pretty()	where likes <= 50
Greater Than	{<key>:{$gt:<value>}}	db.mycol.find({"likes":{$gt:50}}).pretty()	where likes > 50
Greater Than Equals	{<key>:{$gte:<value>}}	db.mycol.find({"likes":{$gte:50}}).pretty()	where likes >= 50
Not Equals	{<key>:{$ne:<value>}}	db.mycol.find({"likes":{$ne:50}}).pretty()	where likes != 50
AND in MongoDB
Syntax
In the find() method, if you pass multiple keys by separating them by ',' then MongoDB treats it as AND condition. Following is the basic syntax of AND -

>db.mycol.find(
   {
      $and: [
         {key1: value1}, {key2:value2}
      ]
   }
).pretty()
Example
Following example will show all the tutorials written by 'tutorials point' and whose title is 'MongoDB Overview'.

>db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty() {
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
For the above given example, equivalent where clause will be ' where by = 'tutorials point' AND title = 'MongoDB Overview' '. You can pass any number of key, value pairs in find clause.

OR in MongoDB
Syntax
To query documents based on the OR condition, you need to use $or keyword. Following is the basic syntax of OR -

>db.mycol.find(
   {
      $or: [
         {key1: value1}, {key2:value2}
      ]
   }
).pretty()
Example
Following example will show all the tutorials written by 'tutorials point' or whose title is 'MongoDB Overview'.

>db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>
Using AND and OR Together
Example
The following example will show the documents that have likes greater than 100 and whose title is either 'MongoDB Overview' or by is 'tutorials point'. Equivalent SQL where clause is 'where likes>10 AND (by = 'tutorials point' OR title = 'MongoDB Overview')'

>db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"},
   {"title": "MongoDB Overview"}]}).pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>
MongoDB - Update Document
MongoDB's update() and save() methods are used to update document into a collection. The update() method updates the values in the existing document while the save() method replaces the existing document with the document passed in save() method.

MongoDB Update() Method
The update() method updates the values in the existing document.

Syntax
The basic syntax of update() method is as follows -

>db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)
Example
Consider the mycol collection has the following data.

{ "_id" : ObjectId(5983548781331adf45ec5), "title":"MongoDB Overview"}
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
Following example will set the new title 'New MongoDB Tutorial' of the documents whose title is 'MongoDB Overview'.

>db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
>db.mycol.find()
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"New MongoDB Tutorial"}
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
>
By default, MongoDB will update only a single document. To update multiple documents, you need to set a parameter 'multi' to true.

>db.mycol.update({'title':'MongoDB Overview'},
   {$set:{'title':'New MongoDB Tutorial'}},{multi:true})
MongoDB Save() Method
The save() method replaces the existing document with the new document passed in the save() method.

Syntax
The basic syntax of MongoDB save() method is shown below -

>db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})
Example
Following example will replace the document with the _id '5983548781331adf45ec7'.

>db.mycol.save(
   {
      "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point New Topic",
         "by":"Tutorials Point"
   }
)
>db.mycol.find()
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"Tutorials Point New Topic",
   "by":"Tutorials Point"}
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
>
MongoDB - Delete Document
In this chapter, we will learn how to delete a document using MongoDB.

The remove() Method
MongoDB's remove() method is used to remove a document from the collection. remove() method accepts two parameters. One is deletion criteria and second is justOne flag.

deletion criteria - (Optional) deletion criteria according to documents will be removed.

justOne - (Optional) if set to true or 1, then remove only one document.

Syntax
Basic syntax of remove() method is as follows -

>db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)
Example
Consider the mycol collection has the following data.

{ "_id" : ObjectId(5983548781331adf45ec5), "title":"MongoDB Overview"}
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
Following example will remove all the documents whose title is 'MongoDB Overview'.

>db.mycol.remove({'title':'MongoDB Overview'})
>db.mycol.find()
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
>
Remove Only One
If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.

>db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)
Remove All Documents
If you don't specify deletion criteria, then MongoDB will delete whole documents from the collection. This is equivalent of SQL's truncate command.

>db.mycol.remove()
>db.mycol.find()
>

////////////////////////


03.14.2017  Tuesday class
MongoDB => React => Meteor
book to read: Learning Javascript design patterns
documented-oriented model
stores data in BSON format
noSQL

BSON:
{
    "_id" : ObjectId("58c89bee35bc42f69caf83f9"),
    "name" : "dave",
    "rownumber" : "3",
    "os" : "win",
    "hobbies" : [ 
        "electronics", 
        "software"
    ]
}
//////////////////////////////////////////////////////////


db.classroom.find().pretty()
{
        "_id" : ObjectId("58c89bee35bc42f69caf83f9"),
        "name" : "dave",
        "rownumber" : "3",
        "os" : "win",
        "hobbies" : [
                "electronics",
                "software"
        ]
}
{
        "_id" : ObjectId("58c89e4835bc42f69caf83fb"),
        "name" : "anthony",
        "rownumber" : "3",
        "os" : "win",
        "hobbies" : [
                "javascript",
                "css"
        ]
}


////////////////////////////////////////////////////////
1. A list of everyone in your row.


db.classroom.find().pretty()

2. An entry for a single person.
db.classroom.find({"name":"alec"}).pretty()

3. The entries for all the Mac users in your row.
db.classroom.find({"os":"mac"}).pretty()


db.classroom.update({"os":"win","name":"anthony"}, {})
db.classroom.drop()
push()

db	- this will return the name of the active database
use lessondb  - this will switch you the using this database

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{
    "_id" : ObjectId("58c8920f3572e62c5b34e773"),
    "content" : "Africa",
    "country" : "Morocco",
    "majorcities" : [ 
        "Casablanca", 
        "Fez", 
        "Marrakech"
    ]
}



db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"continent":"Antartica"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"continent":"Antartica"}}, {multi:true})


db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"capital":"Rabat"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"capital":"RABAT"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$push: {"majorcities":"Agadir"}})

db.iWantToGoToThere.remove({"country":"Morocco"})

db.iWantToGoToThere.remove({})

db.iWantToGoToThere.drop()

db.dropDatabase()


////////////////////////////////////////////////////////////////////////////////////////////////////////////////



MySQL    MongoDB

------   ----------
Table    Collection

Row    Document

Column    Field

Joins    Embedded documents, linking

Does have collections of BSON 
Database have multible collections
http://softwareengineering.stackexchange.com/questions/54373/when-would-someone-use-mongodb-or-similar-over-a-relational-dbms
https://dzone.com/articles/when-use-mongodb-rather-mysql
When is a MongoDB good?
-No rigid schema. If three months down the line you need a certain table to have an extra field, and this and that, you just change it and it ripples out from there on out.
-You Expect a High Write Load
-You need High Availability in an Unreliable Environment (Cloud and Real Life)
-You need to Grow Big (and Shard Your Data)
-Your Data is Location Based
-Your Data Set is Going to be Big (starting from 1GB) and Schema is Not Stable
-You Don't have a DBA

Advantage of mongo?
-flexable
-json syntax using javascript instead of sql querys

Disadvantages?
- scalability and speed.

CAP Theorem
Consistency	Availability	Partition tolerance
Every read receives the most recent write or an error	Every request receives a (non-error) response – without guarantee that it contains the most recent write	The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes

# Installing MongoDB on your Machine

### Contents

1. [Installing MongoDB on Windows](#1-installing-mongodb-on-windows)
2. [Configuring MongoDB on Windows](#2-configuring-mongodb-on-windows)
3. [Installing MongoDB on MacOS](#3-installing-mongodb-on-macos)
4. [Configuring MongoDB on MacOS](#4-configuring-mongodb-on-macos)

- - -

## 1. Installing MongoDB on Windows

1. Go to the MongoDB download page: <a href="https://www.mongodb.com/download-center#community" target="_blank">MongoDB Download Center</a>

2. Scroll down, go to the green box with the Community Server Tab highlighted.

3. Go to the dropdown menu labeled "Version." Select "Windows Server 2008 R2 64-bit and later, with SSL support," then click the "DOWNLOAD (msi)" button.

4. The next page will thank you for downloading MongoDB then show a newsletter link. You can ignore this. In a few seconds, your browser will notify you that the file is downloading.

5. Open up Windows Explorer and locate the installation file (it should be in the default directory where your browser stores downloads). Open the file and follow the instructions. 

   * When the installer prompts you to "Choose Setup Type," click the Complete button, then carry on.

   * A window might pop up mid-installation, asking you whether you’re sure you want to download a particular component of MongoDB. Click yes, otherwise the install will fail.

- - -

## 2. Configuring MongoDB on Windows

1. **IMPORTANT**: You need to create a data directory for your MongoDB installation, or it won't run. Open Git Bash, then cd your way to the root directory: 
2. <code>cd c:</code>

3. Run the following command: 
4. <code>mkdir -p data/db</code>

5. This is the default location for MongoDB’s databases. You need a directory for your databases, or else you MongoDB will refuse to run.

6. You’ll also want to add MongoDB’s path to the PATH environment variable, so that you can run it easily from the bash command line. 
7. First, locate the directory where you installed MongoDB. This is likely C:\\Program Files\\MongoDB\\Server\\3.2\\bin. Copy this directory to your clipboard.

8. Then, open up the System menu or Control Panel on your machine, usually accessible via the Start menu or Search Bar in Windows operating systems.

9. Go to Advanced Settings.

   * If you are on Windows 10 and opened the Control Panel, click **System and Security**; **System**; and **Advanced System Settings**.

10. When a new window opens up, click the **Environment Variables** button located toward the bottom of the window.

11. An Environment Variables window should open up. Look at the bottom half of this window, a scrollable table called "System Variables." Look at the Variable column and search for the variable called Path. Click on it, then click the "Edit…" button below. 

12. The next window will look different depending on your version of Windows. You’ll either be able to press the "New" button and paste your MongoDB directory into the input box that shows up, or you’ll have to paste the directory at the end of a long string of other directories. So it goes.

13. If you would prefer video instructions for this part, watch this:
    [![Youtube Link](http://img.youtube.com/vi/sBdaRlgb4N8/0.jpg)](https://www.youtube.com/watch?v=sBdaRlgb4N8&feature=youtu.be&t=120)

14. Test if it worked: Close your current Git Bash window, then reopen it and run this command: <code>mongod</code> 
15. **NOTE**: No "b" at the end, simply <code>mongod</code>

16. If mongod is still running, great job! You’ve installed MongoDB. Your instructor will take it from here.

17. If mongod didn’t run, and instead your bash threw a "command not found" error, make sure you added MongoDB’s bin directory to your PATH variable (see step B.3). Then, close out git bash and try running mongod again. 

18. If mongod starts but closes after a series of prompts, make sure you created the data/db directory in your root. MongoDB cannot run without this directory (see steps 2.1-2.2).

19. If you’re still encountering issues starting mongod, please ask for assistance from one of the TAs or the instructor.

- - -

## 3. Installing MongoDB on MacOS

1. Run the following command in terminal:
2. <code>brew install mongodb --with-openssl</code>

- - -

## 4. Configuring MongoDB on MacOS

1. **IMPORTANT**: You need to create a data directory for your MongoDB installation, or it will not work. First, cd your way to the root directory: 
2. <code>cd /</code>

3. Now, enter this command: 
4. <code>mkdir –p /data/db</code>

5. With the data/db directory made, you're ready to run MongoDB. Enter this command in your terminal window: <code>mongod</code>
6. **NOTE**: No "b" at the end, simply <code>mongod</code>

7. If mongod didn’t exit from your window, great job! You’ve installed MongoDB. Your instructor will take it from here.
8. If mongod starts but closes after a series of prompts, make sure you created the data/db directory in your root directory, MongoDB cannot run without this directory (see steps 4.1-4.2).

9. If you’re still encountering issues starting mongod, please ask for assistance from one of the TAs or the instructor.

10. If you do not want to us homebrew, you can alternatively follow these instructions: <https://docs.mongodb.com/v3.0/tutorial/install-mongodb-on-os-x/>. However, installing MongoDB without homebrew can be a bit of a headache. Installing homebrew on your mac will make your life as a web developer a metric ton easier.

- - -

### Copyright

Coding Boot Camp (C) 2016. All Rights Reserved.

///////////////////

1. A list of everyone in your row.
db.classroom.find().pretty()

2. An entry for a single person.
db.classroom.find({"name":"alec"}).pretty()

3. The entries for all the Mac users in your row.
db.classroom.find({"os":"mac"}).pretty()


db.classroom.update({"os":"win","name":"anthony"}, {})
db.classroom.drop()
push()

db
use lessondb

db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"continent":"Antartica"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"continent":"Antartica"}}, {multi:true})


db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"capital":"Rabat"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$set: {"capital":"RABAT"}})

db.iWantToGoToThere.update({"country": "Morocco"}, {$push: {"majorcities":"Agadir"}})

db.iWantToGoToThere.remove({"country":"Morocco"})

db.iWantToGoToThere.remove({})

db.iWantToGoToThere.drop()

db.dropDatabase()


03.16.2017 Mongo and web scraping
Cheerio

BSON - binary JSON but compressed
Startup mongod and the mongo shell and switch to a new db named zoo.

Insert into a collection named animals:
One entry for each of your five favorite animals.

Each entry should have 
1. A field of numlegs with an integer of the number of legs that animal has. 
2. A field of class with that animal's class (mammal, reptile, etc).
3. A field of avgWeight with an integer of the average weight of the animal in pounds (any reasonable weight, really).
4. A field of name, with the animal's name.
5. A field of whatIWouldReallyCallIt with the name of what you would call the animal if you got to name it.

Example:

{
  "name": "Panda",
  "numlegs": 4,
  "class": "mammal",
  "weight": 254,
  "whatIWouldReallyCallIt": "Captain Fuzzy Face"
}

db.animals.find().sort({numlegs:1})
db.animals.find().sort({numlegs:-1})


var mongojs = require("mongojs");
var db = mongojs("zoo2",["animals"]);
db.

TODO: Make four routes that display results from your zoo collection

0: Root: Displays a simple "Hello World" message (no mongo required).
1: All: show every animal in a json
2: Name: sort results by name in ascending order, in a json
3: Weight: sort results by weight in descending order, in a json

setup a free mongo hosted solution
mongoDB hosting

If you see this error:
Database Error: { [MongoError: failed to connect to server [localhost:27017] on first connect]
  name: 'MongoError',
  message: 'failed to connect to server [localhost:27017] on first connect' }

You need to start the mongo damon using 'mongod' in bash


1. Make an AJAX function for loading the table in index.html
with the data from your animals collection in MongoDB.
Each row should have info for one animal.

2. Make two AJAX functions that fire when users click
the two buttons on index.html.
    a. When the user clicks the Weight button, the table should
    display the animal data sorted by weight.
    b. When the user clicks the Name button, the table should
    display the animal data sorted by name. 

Good luck!

# 7
Students: Using the tools and techniques you learned so far,
you will scrape a website of your choice, then place the data
in a MongoDB database. Be sure to make the database and collection
before running this exercise.

Consult the assignment files from earlier in the class
if you need a refresher on Cheerio. 

## Route 1 
This route will retrieve all of the data 
from the scrapedData collection as json (this will be populated
by the data you scrape using the next route)

## Route 2
When you visit this route, the server will
scrape data from the site of your choice, and save it to
MongoDB.
TIP: Think back to how you pushed website data  
into an empty array in the last class. How do you
push it into a MongoDB collection instead?

{
  "title": "the title",
  "link": "the url link",
  "class": "mammal",
  "weight": 254,
  "whatIWouldReallyCallIt": "Captain Fuzzy Face"
}

db.scrapedData.save({
title: title,
link:link
})

db.scrapedData.insert({
title: title,
link:link
})

















.