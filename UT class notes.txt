Osei Bonsu
rm -r recursivly remove files

// Open file or folder (PC only)
explorer [name of file]


// Open all files and folder in current directory (PC Only)

explorer .
//////////////////////////////////////////////////////////////////////////////////////
10.20.2016 - Thursday

:Q! to exit vi
10.22.2016 class notes(Saturday)
box model
Flow - Floating, { float: right}

*{
	box-sizing: border-box;
}

css properties
float: left;
clear: both;
overflow: auto; - makes 2 elements the same size next to each other
positioning content
opacity

Home work 
git clone git@github.com:ad5jo/HW-Wireframe.git

git add .
or
git add --update
or
git add "file name with spaces.txt need quotes"

git commit -m "<COMMENT>"
git push origin master

You can get a list of any configured remote urls with the command git remote -v


//////////////////////////////////////////////////////////////////////////////////////
10.25.2016 - Class notes

sticky pos = 
absolute
relative
boxsizing boarder box
GDT google developer tools
css resets - multiple css files - order matters. The last one is applied
use an absolute link for reset CDN (Content Delivery Network)
https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.css

bootstrap and skeleton are public css files

Heroku
must have the index.php file with a specific line of php: 
<?php include_once("index.html"); ?>

Heroku in git bash: 
heroku create
set up ssh key
git push heroku master
AWS Amason Web Services

 https://mysterious-brook-42728.herokuapp.com/
/////////////////////////////////////////////////////////////////////////////////


Setting up a git remote origin

Using SSH
git remote add origin ssh://login@IP/path/to/repository

Using HTTP
git remote add origin http://IP/path/to/repository



//////////////////////////////////////////////////////////////////////////////////////
10.27.2016
Css typography and google fonts - aesthetic and emotional identity of a webpage
	https://fonts.google.com
	http://fontawesome.io/
Pseudo 
classes - example:
p::after { 
    content: " - Remember this";
}

Twitter bootstrap
use the grid
http://getbootstrap.com/
<div class="container"> <p>test</p>    </div>
skeleton
//////////////////////////////////////////////////////////////////////////////////////
10-29-2016 Saturday class notes
bootstarp
layout
Balsamiq
Nav bar not a row
class="container" has 12 col.
Media Query Mobile Responsive (HW) MDN =>Media Types
1. Monitor
2. Screen Reader
3. Print out
mobile only websites used for limited bandwidth

Goole Inspector Toggle Device Toolbar
//////////////////////////////////////////////////////////////////////////////////////

11.01.2016 Tuesday
Theme the bootstrap defaults using a style.css file
Javascript - 
Hoisting 
alert('Hello');
The var on the left determines the type casting
array.lenght
Homework 3 - Game of Hangman (Due 11.10.2016)

//////////////////////////////////////////////////////////////////////////////////////

11.03.2016 
Arrays in Java script
For loops
document.onkeyup = function(event) {
alert("button presssed");
consol.log(event.key);
};

document.querySelector("#test").innerHTML = html;



<p>Please input a number between 1 and 10:</p>

<input id="numb">

<button type="button" onclick="myFunction()">Submit</button>

<p id="demo"></p>

<script>
function myFunction() {
    var x, text;

    // Get the value of the input field with id="numb"
    x = document.getElementById("numb").value;

    // If x is Not a Number or less than one or greater than 10
    if (isNaN(x) || x < 1 || x > 10) {
        text = "Input not valid";
    } else {
        text = "Input OK";
    }
    document.getElementById("demo").innerHTML = text;
}

about:blank
var winner = [["tie", "lose", "win"], ["win", "tie", "lose"], ["lose", "win", "tie"]];
document.write(winner[userChoice][computerChoice] + "!");


11.5.2016 Saturday
var x = 2
var y=x
x=1
h=>2 primatives by value

var x = [2]
var y=x
x[0]=1
y[0]=>1 objects by reference

var winner = [["tie", "lose", "win"], ["win", "tie", "lose"], ["lose", "win", "tie"]]

document.write(winner[userChoice][computerChoice] + "!”);

choices= ["r","p","s"]
["r", "p", "s"]


winner [choices.indexOf("r")][choices.indexOf("p")]

--- Functions ---

var log_array = function(arrayLog){
    for (var i=0; i< array.log.length; i++){
        log_array(stuff_to_log[i];
    }
}

Objects:
var whatever = "something";
var objName={};

objName["name"] = whatever;
objName.name = whatever;

functions are a special object. Can seve them in Arrays or Ojbects.

intercom.com
separate the data and the processing and the display method

'this' in a function is the global object window
'this' in an method is the object calling it


//////////////////////////////////////////////////////////////////////////
// 				attribute			        //
//////////////////////////////////////////////////////////////////////////
11.08.2016 Tuesday Class Notes
DOM review
Method for creating elements (append child)
var new_obj = DOM document.createElement("div"); // not on the page yet
To set the text of the new_obj: parent.appendchild(new_obj) // adds to the screen
Add an attribute newDiv.setAttribute("class", "fancy")

// example code:
var x = document.getElementById("drinkOptions");   // Get the element with id="drinkOptions"
    	for(var i = 0; i < drinkList.length ; i++)
    	{
    		var element = document.createElement("div");
    		element.innerHTML = drinkList[i];
    		x.appendChild(element)
    	}


///---------------------------------------------------


Intro to JQuery  https://jquery.com/
https://code.jquery.com/

Javascript library (helper lib for DOM)
add the CDN (content delivery network)
get element by id ==> $("#clickme")
.remove()
var body = $('body').remove()
now you can do body. 
body.html
$("document').append

$('html').append(body);
$('body').click(function(alert('hello')));
$('h1').click(function(){$('body').append('<div> new </div>')});

Classes
$('.row').remove();
create an element:
var newDiv = $('<div>');
newDiv.html('blaa blaa');

var newDiv = $('<div>');
$('body').append(newDiv );

$.each(obj,task);
$.map() // doesn't work on some older browsers
clicking

/////////////////////////////////////////////////////////////////////////
11.10.2016 Thursday JQuery 
.ready() wait unitl page is loaded

var data = $(event.target).data() // get the jQuery version
console.log(data):

data.letter

<button class="" attribute_a = "sumthin" + ass[i] >  sss </button>

console(this).data("letter")

nthnl	[7:52 PM]  

<img src="http://cartoon-characters.com/wp-content/uploads/2014/04/batman01.jpg" alt=""
        class="bat"
 style = "display:none;">



aryannawim	[7:52 PM]  

$(".laughButton").on("click", function() {


       audioLaugh.play();

     });



nthnl	[7:53 PM]  

$(".coolButton").on("click", function() {

       $(".captainplanet").hide();

       $(".bat").show();

     });



Lexical Scope

//////////////////////////////////////////////////////////////////////////
// 				Calculator				//
//////////////////////////////////////////////////////////////////////////
11.12.2016 Saturday

10-16-Austin-Class-Content/class-content/04-jQuery/4.3/Activities/4-jQueryCalculator/Solved/

review scope of vars
 
'this' in a function is the global object window
'this' in an method is the object calling it
if a function has a dot in front of it when it is used, then it is a special function type called a method.

2:00 guest speaker from Microsoft
Ryan Joy
Refresh Austin

////////////////////////////////////////////////////////////////////////

11.15.2016 Tuesday Class Notes
subl filename.txt
commit by stage line - TODO: learn how to stage a line or partial files. It was mentioned to be possible, but no details given.

git branch
origin is what is on git hub
1 ahead - local code has changes not on git hub

@media queries - 4 types: all, print,screen and speech
Javascript events:

A new scope is only created by using a function.
A new scope is only created by using a function.
A new scope is only created by using a function.
A new scope is only created by using a function.

In-class codefrom scratch Captain America game using jQuery

//////////////////////////////////////////////////////////////////////////////

11.17.2016 Thursday Class Notes

window. can access a global within an object with the same variable name.

timeouts
parenthises after a function name means to call it, without () it is passed to something.




///////////////////////////// TIMERS ///////////////////////////////////////////////////
///////////////////////////// TIMERS ///////////////////////////////////////////////////
///////////////////////////// TIMERS ///////////////////////////////////////////////////
///////////////////////////// TIMERS ///////////////////////////////////////////////////


var x = setTimeout(func,time in ms);
clearTimeout(x);

var x = setInterval(func,time in ms);
clearInterval(x);

ascyncronuos using native code is use setTimeout!

Context:
var funct = function(){person.sayHi()} // will run the method properly

setInterval(decriment,1000);
clearInterval();
function hoisting


///////////////////////////// TIMERS ///////////////////////////////////////////////////
///////////////////////////// TIMERS ///////////////////////////////////////////////////
///////////////////////////// TIMERS ///////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
11.19.2016 Saturday
Basic Job interview skills today (social competency)
1. Technical Questions - logic
2. 

Conditional (Ternary) Operator
JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.

Syntax
variablename = (condition) ? value1:value2 
prime number algorithm
var isPrime = function(num){
 for(var i=2; i<= Math.sqrt(num); i++){
   if(num % i === 0) return false;
 };
 return true;
};

high frequencey trading


////////////////////////////////////////////////////////////////////////////////////////////////

11.22.2016 Tuesday - Ajax - Json
json formatter
exchange data
Application Programmers Interface - 2 types
1. A list of customers and data

2. Application program interface (API) is a set of routines, protocols, and tools for building software applications. An API specifies how software components should interact and APIs are used when programming graphical user interface (GUI) components.


XHR are Ajax requests
var x = {"key":"data"};
How to turn data into a json object? JSON.stringafy(x);

JSON.parse(str);

$("button").click(function(){
    $.ajax({url: "demo_test.txt", success: function(result){
        $("#div1").html(result);
    }});
});

http://api.jquery.com/jquery.ajax/

giphy API - This is the assignment for next week

event deligation for .click

12.03.2016 Saturday Class notes
SW devs hate recruters
7.3 new youk times
Today first hour work on NYT
Then review of JS basics

debugger in code will stop


file maker pro database frakeworker

12.06.2016 Tuesday Class Notes - 
local storage
session storage
document.cookie = "name=" + s_name + "; age=" + s_age + ";"

var str = JSON.stringify(x);
var x = JSON.parse(str);

12.08.2016 Thursday Class Notes - 
www.firebase.com
server side storage for Javascript 
https://console.firebase.google.com/project/ddurkee-79c86/overview
using websockets

///////////////////////////////////////////////////////////////////////////////////////////////

<script src="https://www.gstatic.com/firebasejs/3.6.3/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyBjTtEsYFPrCdJBFGhjH0c_JBTINQJkVKs",
    authDomain: "ddurkee-79c86.firebaseapp.com",
    databaseURL: "https://ddurkee-79c86.firebaseio.com",
    storageBucket: "ddurkee-79c86.appspot.com",
    messagingSenderId: "101017078086"
  };
  firebase.initializeApp(config);
</script>


///////////////////////////////////////////////////////////////////////////////////////////////
{
  "rules": {
    ".read": true,
    ".write": true
  }
}

///
.ref()  is the root level
sockets are much faster than normal html traffic (allows chat usable speeds)

= database.ref(".connected"); // your object
= database.ref(".info/connected"); // special object

Using logic.js as a starting point, 
incorporate view tracking using Firebase on the backend.

HINT: .set() overwrites everything in the specified directory, 
so we will need to use .ref() to store bidder data and 
connections in different folders.


12.10.2016 Saturday Class
matt
snap

instead of set method to replace all code, 
use push to add to the end


database.ref().on("value", function(snapshot) { 
// called with any change to the database
// 
});

database.ref().on("child_added", function(snapshot) { 
// called for each child on the page
// put all the code here for every child
});


12.13.2016 - Project workday

1.5.2017 - project work day (project demo due in 2 days.)
http://www.brewerydb.com/developers/apps
App name: GetBeer
API Key:  17859058d9206f9ea17ed27291f021e0
http://api.brewerydb.com/v2/?key=17859058d9206f9ea17ed27291f021e0
{
"message": "Request Successful",
"data": "You have reached the BreweryDB.com API.  For access, check out http://www.brewerydb.com/developers",
"status": "success"
}
http://api.brewerydb.com/v2/search?key=17859058d9206f9ea17ed27291f021e0&q=guinness&type=beer
--------------------------------------------------------------------------------------

YELP

Consumer Key	WQsQwze98OsJk6tZlUWtWA
Consumer Secret	1I-mAH8p88GpuE0u0x0s3xxENaQ
Token	eemoLGCRg6NHIY2Smkd8BSXZ4DeGh4tj
Token Secret	Tk-4NUC4Dzw0cFG_Gryog_5Vmh8


1.7.2016 - Saturday Present Project 1

API:
friendly chat
Find ticket masters
validate zip codes
austin crime database



materialize instead of bootstrap
iconfinder
google places
cocktail DB
malt io
chart.js
quandl - stocks/currency/commodities
demo stock c pare
nexmo texting API

01.10.2017 Tuesday Class - Node.js
Create and write our own APIs
there are things called node modules

node -v
no window object
has argument support

$ node hello_js.js
Hellloooooo

console.log(process.argv);

Proxy server
require() // this is used to load libraries (only the Exports in the lib.)
when we want to share code several places
var x = require('./hello.js');
console.log(x);

exports.FavoriteNewGirl = [
'Shelby'
];

exports.FavoriteOldGirl = [
'Steve'
];

var notFavoriteAtAll = ['Robert the Second'];
exports.FavoriteVet = ['Robert the Second'];

/////////////////////////////////////////////////////////////////
AWS web services
echo api
text to speach

twitter
imdb
Spotify

////////////////////////////////////////////////////////////

exports.handeler = function (event, context, callback)
{
//connect to spotify
// call my mother
// text me something

callback ){text:'hello'})
}

http://asdfasdfsd/funasdfa


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

1.12.2017 Thursday node??

nodejs.org has all the documentation
/////////////////////////////////////////////////////////////////////
npm install something   // will install the dependency only
and 
npm install something --save // install the dependency and add it to your package.json



writefile
// NPM Package for reading and writing files
var fs = require("fs");

// This block of code will create a file called "movies.txt".
// It will then print "Inception, Die Hard" in the file
fs.writeFile("movies.txt", "Inception, Die Hard", function(err) {

  // If the code experiences any errors it will log the error to the console.
  if (err) {
    return console.log(err);
  }

  // Otherwise, it will print: "movies.txt was updated!"
  console.log("movies.txt was updated!");

});
////////////////////////////////////////////////////////////////

var fileContents = fs.readFileSync('./views/' + templateName + '.html', 'utf8');

settimeout(0)
to make sync code be ascync

/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////

npm install something   // will install the dependency only
and 
npm install something --save // install the dependency and add it to your package.json


npm install lodash
npm install --save request
package.json is a list of dependancies (node modules)
create

npm install request
npm init

visual studio code
click the No Bug icon
click the gear - select environment: node js
make sure the correct file is specified.(program:) Change it if needed.
Add break points
click the play button


// Include the request npm package (Don't forget to run "npm install request" in this folder first!)
var request = require("request");

// Then run a request to the OMDB API with the movie specified
request("http://www.omdbapi.com/?t=remember+the+titans&y=&plot=short&r=json", function(error, response, body) {

  // If the request is successful (i.e. if the response status code is 200)
  if (!error && response.statusCode === 200) {

    // Parse the body of the site and recover just the imdbRating
    // (Note: The syntax below for parsing isn't obvious. Just spend a few moments dissecting it).
    console.log("The movie's rating is: " + JSON.parse(body).imdbRating);
  }
});


////////////////////////////////////////////////////////////////////////////////

https://www.omdbapi.com/

npm start


//////////////////////////////////////////////////////////////////////////////////
1.14.2017 Saturday Class at Thompson Conference Center
10.3	Sat, Jan 14, 2017	Sat, Jan 14, 2017	NPM Packages
use slice instead of a for loop

var numbers = (process.argv).slice(2);

function sorting(a,b) {
    return a - b;
}

var solution = numbers.map(parseFloat).sort(sorting);
console.log(solution);`

///////////////////
before you require a library you need to install the package using NPM
use a call back to process a  request asyc
event que
npm init - creates a JSON package using a wizard
npm install request --save // it will install the depencancies for you
exclude the node modules: node_modules

you can have a global git ignore

.ignore - 
// glob

npm install weather-js
//////////////////////
// Basic Node application for requesting data from the OMDB website
// Here we incorporate the "request" npm package
var request = require("request");

// We then run the request module on a URL with a JSON
request("http://www.omdbapi.com/?t=remember+the+titans&y=&plot=short&r=json", function(error, response, body) {

  // If there were no errors and the response code was 200 (i.e. the request was successful)...
  if (!error && response.statusCode === 200) {

    // Then we print out the imdbRating
    console.log("The movie's rating is: " + JSON.parse(body).imdbRating);
  }
});
///////////////////////
// Here we include the weather-js so we can use it in our Node application.
var weather = require("weather-js");

// Then we use the package to search for the weather at a location
weather.find({ search: "Anchorage, AK", degreeType: "F" }, function(err, result) {

  // If there is an error log it.
  if (err) {
    console.log(err);
  }

  // If there is no error... then print out the weather data.
  // We use JSON.stringify to print the data in string format.
  // We use the JSON.stringify argument of "2" to make the format pretty.
  // See link here: http://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript
  console.log(JSON.stringify(result, null, 2));

});
///////////////////////
.then is similar to a callback


//////////////////////////////////////////////////////////////////////////////////
1.19.2017 Thursday Class at Norse Conference Center : Javascript Constructors Pt I and closure

Constructors - The function name starts with a capitol.
the new keyword makes a function return an object as a constructor

Dogs.__proto__
array.<tab>
animal.prototype.fur = "fuzzy"
constructor is a function
.HasOwnProperty('fur')
constructor has a prototype

for (var i in obj) {console.log(i)}


///////////////////////////////////////////////////////////////////////////////////

01.21.2017 Class notes: Javascript Constructors Pt II, recursion and JS Callbacks

to creat a namespace for each request:
1.
var request = require('request');
for(var i = 0; i < 10; i++){
    (function(index) {
    request('http://www.google.com', function(){
      console.log(index);}, i);
    })(i);
}

2.
`var request = require('request');
for (var i = 0; i < 10; i++) {
  function makeSync(i) {
      request('http://www.google.com', function() {
          console.log(i); // 1 through 10
      })
  }
  makeSync(i)
}`


/////

osei [10:27 AM] 
Instructions

In this activity, we are going to create a constructor function called "Programmer" which can be used to create objects containing information on various programmers.

Your "Programmer" constructor should be able to take in the following information...

The programmer's name
Their position/job title
How old they are
Favorite programming language
Now create a method for the constructor that would print all of the information contained within an object to the console.

Finally, create a "Programmer" object and call the method to print its contents

Recursion
Type Script

To run the application from Bash:
1. npm install inquirer
2. node programmer.js

// 11.3 Javascript Callbacks

In Class Assignment is a weather application that accepts arguments
install date --save
require date

#####################################################################################
To solve this:
press "i"
write your merge message.
press "esc"
write ":wq"
then press enter.
osx - Please enter a commit message to explain why this merge is ...
stackoverflow.com/.../please-enter-a-commit-message-to-explain-why-this-merge-is-nec...
######################################################################################





01.24.2017 MySQL

SELECT * selects every field of a record
UPDATE ... 
DELETE ...
DROP TABLE ...

CREATE DATABASE inclass_food_songs_db;



USE inclass_food_songs_db;



CREATE TABLE favorite_foods (
  
id INTEGER(11) AUTO_INCREMENT NOT NULL primary key,

  food VARCHAR(50) NOT NULL,

  score INTEGER(50)

);



CREATE TABLE favorite_songs (
  
id INTEGER(11) AUTO_INCREMENT NOT NULL primary key,

  song VARCHAR(50) NOT NULL,

  artist VARCHAR(50),

  score INTEGER(50)

);



CREATE TABLE favorite_movies (
  
id INTEGER(11) AUTO_INCREMENT NOT NULL primary key,
  film VARCHAR(50) NOT NULL,

  five_times BOOLEAN,

  score INTEGER(50)

);

**** npm MYSQL

id allow us to track things

UPDATE [LOW_PRIORITY] [IGNORE] table_reference
    SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
    [WHERE where_condition]
    [ORDER BY ...]
    [LIMIT row_count]


CREATE TABLE programming_languages (
  id INTEGER(11) AUTO_INCREMENT NOT NULL primary key,
  languages VARCHAR(50) NOT NULL,
  rating INTEGER(50)
);


INSERT INTO programming_languages (languages,rating)
VALUES ("javascript", 50);
INSERT INTO programming_languages (languages,rating)
VALUES ("php", 25);
INSERT INTO programming_languages (languages,rating)
VALUES ("react", 15);

UPDATE  programming_languages
SET languages="AJAX" where id = 1;

To see the grid:
select * from programming_languages;

//////////////////////////////////////////////////////////

create table pets(
name VARCHAR(50) NOT NULL,
breed VARCHAR(50) NOT NULL

);

/// join

select * from people 
inner join pets 
on people.pet_name = pet.name

select * from people 
left join pets 
on people.pet_name = pet.name


select * from people 
right join pets 
on people.pet_name = pet.name


sql injection attack
https://xkcd.com/327/
On server side code check for DROP, escape the inputs and sanitize inputs

inner join
left join
right join
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.26.2017 - Node - MySQL Integration
fizz buzz in 10 minutes

npm install mysql
var mysql = require("mysql"); // npm install mysql

// in_class_music_db
CREATE DATABASE music_db;

USE music_db;

CREATE TABLE songs (

  
id INTEGER(11) AUTO_INCREMENT NOT NULL primary key,


	title VARCHAR(50) NOT NULL,

	artist VARCHAR(50) NOT NULL,

	genre VARCHAR(50) NOT NULL

);


CRUD
-----------
CREATE -
READ - 
UPDATE - 
DELETE - 


//////////////////////////////////////////
magic tricks

shaverda [9:04 PM] 
select * from [table name]

in the connection use ? then specify using js object

connection.query("SELECT * FROM songs WHERE genre=?", ["Dance"],
function(err, res) {
  for (var i = 0; i < res.length; i++) {
    console.log(res[i].id + " | " + res[i].title + " | " + res[i].artist + " | " + res[i].genre);
  }
});

connection.query("INSERT INTO products SET ?", {
  flavor:"Rocky Road",
  price:3.00,
  quantity:50
}, function(err, res) {});

connection.query("UPDATE products SET ? WHERE ?", 
[ 
  {quantity: 100},
  {flavor: "Rocky Road"}
]
,function(err, res) {});


connection.query("DELETE FROM products WHERE ?", {flavor: "strawberry"},
 function(err, res) {});

/////////////////////////////////////////////////////////////////////////////////////////////
1.28.2017 Career hour 8-9am
Dan Murrell
continious context
Swift Playground - compiles as you type the code. Originally designed for children



/////////////////////////////////////////////////////////////////////////////////////////////
Node - MySQL Integration
Massive MySQL Data Project


// don't need exacr spelling
SELECT * FROM someting WHERE name LIKE '%osea%'

// agrigation query
SELECT * FROM someting GROUP BY  artistname  HAVING count(*) >1;


sql is a set style language

ALTER TABLE
ADD INDEX

jh.rocks [1:52 PM] 

SELECT distinct top5000.artist, top5000.year, topalbums.year, topalbums.album

FROM top5000

INNER JOIN topalbums
ON top5000.artist=topalbums.artist and top5000.year=topalbums.year

ORDER BY top5000.year
WHERE top5000.artist = 'what you are looking for' and topalbums.artist = 'what you are looking for'

/////////////////////////////////////////////////////////////////////////////////////////////////

12.3	Mon, Jan 30, 2017	Tue, Jan 31, 2017	Massive MySQL Data Project (<-- this was last class. We are 1 class ahead)
							Intro to Node Web Servers


/////////////////////////////////////////////////////////////////

npm install --save request
package.json is a list of dependancies (node modules)
create

npm install request
npm init

Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.

var request = require('request');
request('http://www.google.com', function (error, response, body) {
  if (!error && response.statusCode == 200) {
    console.log(body) // Show the HTML for the Google homepage. 
  }
})

///---------------------------------------------------------------------------------------------------------------

What is the --save option for npm install?
have a package.json file. Start by running npm init to create one. Then calls to npm install --save or npm install --save-dev or npm install --save-optional will update the package.json to list your dependencies.

By default, NPM simply installs a package under node_modules. When you're trying to install dependencies for your app/module, you would need to first install them, and then add them (along with the appropriate version number) to the dependencies section of your package.json.

The --save option instructs NPM to include the package inside of the dependencies section of your package.json automatically, thus saving you an additional step.

In addition, there are the complementary options --save-dev and --save-optional which save the package under devDependencies and optionalDependencies, respectively. This is useful when installing development-only packages, like grunt or your testing library.

It's documented in the documentation for npm install


///---------------------------------------------------------------------------------------------------------------

Day 39 Server-Side!

We will create our first webserver

2 most important concepts
1. what is express server (express.js)
2. How to handle it / Route it

Creating a server
----------------------- full server --------------------
var http = require("http");
var PORT = 8080;
function handleRequest(request, response){
response.end("It works Path Hit: " + response.url );
}

// use Node http package to create our server
var server = http.createServer(handleRequest);

server.listen(PORT, Function() {
console.log("Server listening on http://localhost:%s", PORT);
}
----------------------- full server --------------------

3306 is the port for MySQL
Always use asyncronous code on the server

response 200 => Success
res.writeHead(200, {"content type" : "text/html"}); // this may not be correct
// But if the responce isn't JSON we need to tell the browser it is text and not JSON
res.write(some_html); // appends to you html
res.end (my_html); // sends the html

html file could be a file. read in using package "fs"

npm mustache
https://mustache.github.io/

/*
Instructions:

Create a website with four routes:
Home
Favorite Food
Favorite Movies
Favorite CSS Frameworks
Each route should be triggered by a different URL.
Each route should display an HTML page listing your favorite three things of each.
Be sure to se fs to serve your HTML files.
*/


npm install something   // will install the dependency only
and 
npm install something --save // install the dependency and add it to your package.json

//////////////////////////////////////////////////////////

13.2	Sat, Feb 2, 2017	Intro to Express Servers
A server is software to handle requests with responses and some random tasks
Express makes server creation easy http://expressjs.com/

npm install

app.get("/", function(req, res) { // get is what is responded to
	res.send("Welcome");
}

https://localhost:3000


app.get("/:characters", ....

var c = characters.filter(c=>c.routName === chosen)

/////////////////////////////////////////////////////////////////////////////////////
02.04.2017 
13.3	Sat, Feb 4, 2017	Hot Restaurant - Backend Application	
Express Review

CRUD - Create,_read,_update_and_delete
CRUD - Create,_read,_update_and_delete

git checkout master

app.use( .static...., <== sets the path to root. Then on the fron tend use ./path (dot being the current directory)

res.end

/////////////////////////////////////////////////////////////////////////////////////
02.04.2017 14.1	Thu, Feb 7, 2017	Intro to Handlebars

/////////////////////////////////////////////////////////////////////////////////////
14.2	Sat, Feb 9, 2017  REST	Express.js + Handlebars.js + MySQL

http://www.restapitutorial.com/lessons/whatisrest.html

npm install rest

CRUD - Create,_read,_update_and_delete

REST interface
post http://url/animals/ create a new animal
index.html

return {
id: 1,
type: dog
}

get http://url/animals/ list all the animals
get http://url/animals/1 list a specific animal

put http://url/animals/1 {fur:true} update animal

return {
id: 1,
type: dog
fur: true
}

delete http://url/animals/1 //return 200


1. set express server
2. set up handle bars
3. set sql
4. set up parser

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

14.3	Sat, Feb 11, 2017	Intro to ORMs
easier to write sql query's

Next week sql-ize
method = DELETE

// the actual routes in the server.js file next:
app.get("/",function )
app.put('/:id', )

var orm = require("./config/orm.js");
var return_val = orm.selectwhere("pets","animal_name", "rachel");

need to use a call back function
can use a promise
can use await

Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates, in effect, a "virtual object database" that can be used from within the programming language.
Object-relational mapping - Wikipedia
https://en.wikipedia.org/wiki/Object-relational_mapping


,cp)m {
...
async connection.query...
if (cb) cb(result);
}0;

var orm = require("./config/orm.js");

// Find a pet in the pets table by an animal_name of Rachel.
orm.selectWhere("pets", "animal_name", "Rachel", function(data){
  console.log('this works:', data);
});


var connection = require("./connection.js");

// Object Relational Mapper (ORM)

var connection = require("../config/connection.js");

var orm = {
  selectWhere: function (tableInput, colToSearch, valOfCol, cb) {
    var queryString = "SELECT * FROM ?? WHERE ?? = ?";

    connection.query(queryString, [tableInput, colToSearch, valOfCol], function (err, result) {
      cb(result);
    });
  },

  selectWherePromise: function (tableInput, colToSearch, valOfCol) {
    return new Promise(function (resolve, reject) {
      var queryString = "SELECT * FROM ?? WHERE ?? = ?";
      connection.query(queryString, [tableInput, colToSearch, valOfCol], function (err, result) {
        resolve(result);
      });
    });
  }
};

module.exports = orm;


///////

orm
  .selectWherePromise("parties", "party_type", "grown-up")
  .then(function (data) {
    console.log(data)
  });

///////


JION - connect 2 tables with a common field
JEFT_JOIN - everything on the left table plus the right table
INNER_JOIN - fields must be in both tables

Asycronous topic


MVC Model View controller







.